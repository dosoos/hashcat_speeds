name: Auto Update Benchmark Data

on:
  push:
    paths:
      - 'benchmarks/**'
    branches:
      - main

jobs:
  update-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Python environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Check benchmarks directory changes
      id: check_benchmarks
      run: |
        echo "üîç Checking files in benchmarks directory..."
        echo "Current benchmarks directory contents:"
        ls -la benchmarks/
        echo "File count: $(ls benchmarks/*.txt 2>/dev/null | wc -l)"
        
        # Get current list of .txt files in benchmarks directory
        current_files=$(ls benchmarks/*.txt 2>/dev/null | xargs -n 1 basename | sort)
        echo "Current benchmark files:"
        echo "$current_files"
        
        # Get previous list from pages/devices.txt
        if [ -f "pages/devices.txt" ]; then
          previous_files=$(cat pages/devices.txt | sort)
          echo "Previous benchmark files from pages/devices.txt:"
          echo "$previous_files"
        else
          echo "‚ö†Ô∏è pages/devices.txt not found, treating as first run"
          previous_files=""
        fi
        
        # Compare the two lists
        if [ "$current_files" != "$previous_files" ]; then
          echo "‚úÖ Detected changes in benchmark files:"
          echo "Files added/changed:"
          comm -23 <(echo "$current_files") <(echo "$previous_files") || true
          echo "Files removed:"
          comm -13 <(echo "$current_files") <(echo "$previous_files") || true
          echo "has_benchmark_changes=true" >> $GITHUB_OUTPUT
        else
          echo "‚ÑπÔ∏è No changes detected in benchmark files"
          echo "has_benchmark_changes=false" >> $GITHUB_OUTPUT
        fi

    - name: Run data generation script
      if: steps.check_benchmarks.outputs.has_benchmark_changes == 'true'
      run: |
        echo "üöÄ Starting gendata.py execution..."
        python gendata.py
        echo "‚úÖ gendata.py execution completed"
        
        # Update pages/devices.txt with current benchmark files
        echo "üìù Updating pages/devices.txt with current benchmark files..."
        ls benchmarks/*.txt 2>/dev/null | xargs -n 1 basename > pages/devices.txt
        echo "‚úÖ pages/devices.txt updated"

    - name: Check for file changes
      if: steps.check_benchmarks.outputs.has_benchmark_changes == 'true'
      id: check_changes
      run: |
        echo "üîç Checking for file changes..."
        git status --porcelain
        if [ -n "$(git status --porcelain)" ]; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "üìù Detected file changes:"
          git diff --name-only
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "‚ÑπÔ∏è No file changes detected"
        fi

    - name: Configure Git user
      if: steps.check_benchmarks.outputs.has_benchmark_changes == 'true' && steps.check_changes.outputs.has_changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Commit changes
      if: steps.check_benchmarks.outputs.has_benchmark_changes == 'true' && steps.check_changes.outputs.has_changes == 'true'
      run: |
        git add .
        git commit -m "ü§ñ Auto update benchmark data

        - Detected changes in benchmark files by comparing with pages/devices.txt
        - Automatically ran gendata.py to generate latest data
        - Updated pages/datas.json, pages/devices.txt and charts in images/ directory

        Generated by GitHub Actions on $(date '+%Y-%m-%d %H:%M:%S')"

    - name: Push to main branch
      if: steps.check_benchmarks.outputs.has_benchmark_changes == 'true' && steps.check_changes.outputs.has_changes == 'true'
      run: |
        echo "üì§ Pushing changes to main branch..."
        git push origin main
        echo "‚úÖ Push completed"

    - name: Display update results
      if: steps.check_benchmarks.outputs.has_benchmark_changes == 'true'
      run: |
        if [ "${{ steps.check_changes.outputs.has_changes }}" == "true" ]; then
          echo "‚úÖ Data successfully updated and committed to main branch"
          echo "üìä Updated files:"
          git diff --name-only HEAD~1 HEAD
          echo ""
          echo "üéâ Automation workflow completed!"
        else
          echo "‚ÑπÔ∏è No file changes detected, skipping commit"
          echo "‚úÖ Workflow completed, no updates needed"
        fi

    - name: Skip execution notice
      if: steps.check_benchmarks.outputs.has_benchmark_changes == 'false'
      run: |
        echo "‚ÑπÔ∏è No changes detected in .txt files in benchmarks directory"
        echo "‚úÖ Workflow skipped execution, as expected"
